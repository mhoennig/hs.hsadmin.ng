
management:
    server:
        port: 8081
        address: 127.0.0.1
    endpoints:
        web:
            exposure:
                include: info, health, metrics, metric-links, mappings, openapi, swaggerui

spring:
    sql:
        init:
            platform: postgres

    datasource:
        url-tc: jdbc:tc:postgresql:15.5-bookworm:///spring_boot_testcontainers
        url-tcx: jdbc:tc:postgresql:15.5-bookworm:///spring_boot_testcontainers?TC_REUSABLE=true&TC_DAEMON=true
        url-local: jdbc:postgresql://localhost:5432/postgres
        url: ${spring.datasource.url-tc}
        username: postgres
        password: password

    jpa:
        properties:
            hibernate:
                default_schema: public
                dialect: net.hostsharing.hsadminng.config.PostgresCustomDialect
                format_sql: false
        hibernate:
            ddl-auto: none
        show-sql: false

    test:
        database:
            replace: none

    liquibase:
        change-log: classpath:/db/changelog/db.changelog-master.yaml
        contexts: tc,test,dev,pg_stat_statements

logging:
    level:
        liquibase: WARN
        net.ttddyy.dsproxy.listener: DEBUG # HOWTO: log meaningful SQL statements
        # just for the case there are problems with Testcontainers/Docker integration
        # org.testcontainers: DEBUG
        # com.github.dockerjava: DEBUG

testcontainers:
    network:
        mode: host

hsadminng:
    cas:
        server: http://localhost:8088/cas # mocked via WireMock
        service: http://localhost:8080/api # must match service used in WireMock mock response
